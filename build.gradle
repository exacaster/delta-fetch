plugins {
    id "groovy"
    id "io.micronaut.application" version "3.7.7"
    id "com.github.ben-manes.versions" version "0.46.0"
}

group "com.exacaster.deltafetch"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

micronaut {
    version = "3.8.3"
    runtime "netty"
}
mainClassName = "com.exacaster.deltafetch.Application"

dependencies {
    // Micronaut
    implementation "io.micronaut.cache:micronaut-cache-caffeine"
    implementation "io.micronaut.security:micronaut-security-oauth2"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "com.nimbusds:nimbus-jose-jwt:9.31"
    runtimeOnly "io.micronaut:micronaut-management"

    // Delta reading
    implementation "io.delta:delta-standalone_2.12:0.6.0"
    implementation("org.apache.hadoop:hadoop-client:3.3.4") {
        exclude group: "org.slf4j"
    }
    implementation "org.apache.parquet:parquet-hadoop:1.12.3"
    implementation("org.apache.hadoop:hadoop-aws:3.3.4") {
        exclude group: "org.slf4j"
    }

    // Test Dependencies
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut:micronaut-http-client"
}

test {
    useJUnitPlatform()
}

tasks.named("dockerfile") {
    baseImage = "gcr.io/distroless/java11:latest"
}

tasks.named("dockerBuild") {
    images = [getImage()]
}

def getImage() {
    def image = findProperty('IMAGE') ?: 'exacaster/delta-fetch'
    def tag = findProperty('TAG') ?: 'latest'
    return "${image}:${tag}"
}
